#ifndef _PERIPHERALS_MZ
#define _PERIPHERALS_MZ

#define NUM_PPS_IN      60          // This must be set to the highest PPS_IN_xxx value
#define NUM_PPS_OUT     15           // This must be set to the highest PPS_OUT_xxx value

typedef enum {
    // This table is the value loaded into the output mapping register

    PPS_OUT_GPIO        = (0 + (_PPS_SET_A|_PPS_SET_B|_PPS_SET_C|_PPS_SET_D)),

    PPS_OUT_U3TX        = (1 + _PPS_SET_A),
    PPS_OUT_U4RTS       = (2 + _PPS_SET_A),
    PPS_OUT_SDO1        = (5 + (_PPS_SET_A | _PPS_SET_B)),
    PPS_OUT_SDO2        = (6 + (_PPS_SET_A | _PPS_SET_B)),
    PPS_OUT_SDO3        = (7 + (_PPS_SET_A | _PPS_SET_B)),
    PPS_OUT_SDO5        = (9 + (_PPS_SET_A | _PPS_SET_B)),
    PPS_OUT_SS6         = (10 + _PPS_SET_A),
    PPS_OUT_OC3         = (11 + _PPS_SET_A),
    PPS_OUT_OC6         = (12 + _PPS_SET_A),
    PPS_OUT_REFCLK4     = (13 + _PPS_SET_A),
    PPS_OUT_C2OUT       = (14 + _PPS_SET_A),
    PPS_OUT_C1TX        = (15 + _PPS_SET_A),

    PPS_OUT_U1TX        = (1 + _PPS_SET_B),
    PPS_OUT_U2RTS       = (2 + _PPS_SET_B),
    PPS_OUT_U5TX        = (3 + _PPS_SET_B),
    PPS_OUT_U6RTS       = (4 + _PPS_SET_B),
    PPS_OUT_SDO4        = (8 + (_PPS_SET_B | _PPS_SET_D)),
    PPS_OUT_OC4         = (11 + _PPS_SET_B),
    PPS_OUT_OC7         = (12 + _PPS_SET_B),
    PPS_OUT_REFCLK1     = (15 + _PPS_SET_B),

    PPS_OUT_U3RTS       = (1 + _PPS_SET_C),
    PPS_OUT_U4TX        = (2 + _PPS_SET_C),
    PPS_OUT_U6TX        = (4 + (_PPS_SET_C | _PPS_SET_D)),
    PPS_OUT_SS1         = (5 + _PPS_SET_C),
    PPS_OUT_SS3         = (7 + _PPS_SET_C),
    PPS_OUT_SS4         = (8 + _PPS_SET_C),
    PPS_OUT_SS5         = (9 + _PPS_SET_C),
    PPS_OUT_SDO6        = (10 + (_PPS_SET_C | _PPS_SET_D)),
    PPS_OUT_OC5         = (11 + _PPS_SET_C),
    PPS_OUT_OC8         = (12 + _PPS_SET_C),
    PPS_OUT_C1OUT       = (14 + _PPS_SET_C),
    PPS_OUT_REFCLK3     = (15 + _PPS_SET_C),

    PPS_OUT_U1RTS       = (1 + _PPS_SET_D),
    PPS_OUT_U2TX        = (2 + _PPS_SET_D),
    PPS_OUT_U5RTS       = (3 + _PPS_SET_D),
    PPS_OUT_SS2         = (6 + _PPS_SET_D),
    PPS_OUT_OC2         = (11 + _PPS_SET_D),
    PPS_OUT_OC1         = (12 + _PPS_SET_D),
    PPS_OUT_OC9         = (13 + _PPS_SET_D),
    PPS_OUT_C2TX        = (15 + _PPS_SET_D),

    PPS_IN_INT1     = (0  + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_INT2     = (1  + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_INT3     = (2  + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_INT4     = (3  + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_T2CK     = (5  + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_T3CK     = (6  + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_T4CK     = (7  + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_T5CK     = (8  + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_T6CK     = (9  + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_T7CK     = (10  + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_T8CK     = (11  + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_T9CK     = (12  + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_IC1      = (13  + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_IC2      = (14 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_IC3      = (15 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_IC4      = (16 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_IC5      = (17 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_IC6      = (18 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_IC7      = (19 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_IC8      = (20 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_IC9      = (21 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_OCFA     = (23 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_U1RX     = (25 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_U1CTS    = (26 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_U2RX     = (27 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_U2CTS    = (28 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_U3RX     = (29 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_U3CTS    = (30 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_U4RX     = (31 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_U4CTS    = (32 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_U5RX     = (33 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_U5CTS    = (34 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_U6RX     = (35 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_U6CTS    = (36 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_SDI1     = (38 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_SS1      = (39 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_SDI2     = (41 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_SS2      = (42 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_SDI3     = (44 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_SS3      = (45 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_SDI4     = (47 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_SS4      = (48 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_SDI5     = (50 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_SS5      = (51 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_SDI6     = (53 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_SS6      = (54 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_C1RX         = (55 + _PPS_SET_B + _PPS_INPUT_BIT),
    PPS_IN_C2RX         = (56 + _PPS_SET_C + _PPS_INPUT_BIT),
    PPS_IN_REFCLKI1 = (57 + _PPS_SET_A + _PPS_INPUT_BIT),
    PPS_IN_REFCLKI3 = (59 + _PPS_SET_D + _PPS_INPUT_BIT),
    PPS_IN_REFCLKI4 = (60 + _PPS_SET_B + _PPS_INPUT_BIT),

} ppsFunctionType;

#endif
